name: Deploy Test

on:
  workflow_dispatch:
    inputs:
      releaseTag:
        description: 'Tag of version to be promoted to test'
        required: true

env:
  TF_VERSION: 0.14.7
  TG_VERSION: 0.26.7
  TG_SRC_PATH: terraform
  TFC_WORKSPACE: test
  TARGET_ENV: test

jobs:
  s3:
    name: Upload to S3
    runs-on: ubuntu-20.04
    environment: test
    strategy:
      matrix:
        node-version: [14.x]
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME_SANDBOX }}
          role-duration-seconds: 900
          role-session-name: bcprs-info-sandbox-gh-action
          role-skip-session-tagging: true

      - uses: 'marvinpinto/action-inject-ssm-secrets@v1.2.1'
        with:
          ssm_parameter: '/bcprs-info-sandbox/s3-bucket-info-artifacts'
          env_variable_name: 'S3_BUCKET_ARTIFACTS'

      - name: Copy from s3 sandbox
        env:
          s3_bucket: '${{ env.S3_BUCKET_ARTIFACTS }}'
          dir_name: ${{ github.sha }}
        run: |
          aws s3 sync s3://$s3_bucket/$dir_name// dist/bcprs-info

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          role-duration-seconds: 900
          role-session-name: bcprs-info-test-gh-action
          role-skip-session-tagging: true

      - uses: 'marvinpinto/action-inject-ssm-secrets@v1.2.1'
        with:
          ssm_parameter: '/bcprs-info/s3-bucket'
          env_variable_name: 'S3_BUCKET'

      # - name: Deploy to Test S3
      #   env:
      #     s3_bucket: '${{ env.S3_BUCKET }}-${{ env.TARGET_ENV }}'
      #     dir_name: ${{ github.event.inputs.releaseTag }}
      #   run: |
      #     aws s3 sync dist/bcprs-info s3://$s3_bucket/$dir_name/

  terragrunt:
    name: Run Terragrunt
    needs: ['s3']
    runs-on: ubuntu-20.04
    environment: test
    strategy:
      matrix:
        node-version: [14.x]
    steps:
      - uses: actions/checkout@v2
        with:
          ref: ${{ github.event.inputs.releaseTag }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          role-duration-seconds: 900
          role-session-name: bcprs-info-test-gh-action
          role-skip-session-tagging: true

      # Public variables
      - uses: 'marvinpinto/action-inject-ssm-secrets@v1.2.1'
        with:
          ssm_parameter: '/bcprs-info/s3-bucket'
          env_variable_name: 'S3_BUCKET'
      - uses: 'marvinpinto/action-inject-ssm-secrets@v1.2.1'
        with:
          ssm_parameter: '/bcprs-info/origin-id'
          env_variable_name: 'ORIGIN_ID'

      - name: Setup Terrafrom
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: ${{ env.TF_VERSION }}
          cli_config_credentials_token: ${{ secrets.TFC_TEAM_TOKEN }}

      - name: Setup terragrunt
        uses: peter-murray/terragrunt-github-action@v1.0.0
        with:
          terragrunt_version: ${{ env.TG_VERSION }}

      - name: Terragrunt Apply
        working-directory: ${{ env.TG_SRC_PATH }}/${{ env.TFC_WORKSPACE }}
        env:
          app_version: ${{ github.event.inputs.releaseTag }}
          s3_bucket: ${{ env.S3_BUCKET }}
          origin_id: ${{ env.ORIGIN_ID }}
        run: terragrunt apply-all --terragrunt-non-interactive
